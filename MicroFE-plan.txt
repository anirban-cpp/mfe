#   Set up Git monorepo which will contain all our individual micro FEs.
    This can be done easily with turbo: "npx create-turbo@latest -e with-react-native-web"
    Link: https://github.com/vercel/turbo/tree/main/examples/with-react-native-web

#   Repo will have packages folder. This will have container (which is our main host app)
    Along with that we will have our individual microFEs and shared (state/store).
    Also we can additionally have UI package that may contain any component/sharable code
    from external teams like Phoenix (if needed)

#   Set up github actions scripts (CI/CD) that will look into each sub-project or microFE when we push our code.
    If any changes are made, then we will start a process that will make a production version of that microFE app with webpack

#   Once production build is done, we can upload all our files to Amazon S3

Each microFE step should be independent. So if microFE A is changed only, then only its production build is done and uploaded to S3. Others should be affected because of that
One can be deployed without others being deployed.

Amazon S3 will have the built version of all our different sub-projects/microFEs.

When a file request is made, the file is not served directly from S3, instead it will make a request to Amazon CloudFront (basically a CDN)
Basically Amazon CloudFront will see the incoming request and figure out which files to pull out of our S3 bucket and serve it back to the browser.


For the CI/CD pipeline setup
----------------------------
We can make use of github actions.
Basically whenever any github event is triggered say 'push', 'create PR', 'merge', etc, the webhook will run all workflows associated with this event


##  Workflow for deploying container(host)

Whenever code is pushed to the master branch (primary branch) and there is a commit that contains a change to the container/host folder, the following
steps need to be performed:

->  Change to container folder
->  Install the dependencies
->  Create a production build usig webpack
->  Upload the result to AWS S3

These commands need to be executed in the Github virtual machine by creating a .yml file in .github/workflows

/*
we will be writing our container workflow and using the chrislennon/action-aws-cli@v1.1 action. 
Unfortunately, this is now failing and appears to be no longer maintained.
 A community fork was created to fix the issues which we can use instead:

instead of this:

      - uses: chrislennon/action-aws-cli@v1.1

write this:

      - uses: shinyinc/action-aws-cli@v1.2

This updated action will require an AWS_DEFAULT_REGION key, so, for now, we can just add a placeholder.

      - uses: shinyinc/action-aws-cli@v1.2
      - run: aws s3 sync dist s3://${{ secrets.AWS_S3_BUCKET_NAME }}/container/latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ""
*/


Creating the S3 bucket
----------------------
Create the S3 bucket and change the setting to public as we want our app to be available in public domain.
Basically 
->  enable Static Website hosting
->  Hosting Type: Host a static website
->  index document: index.html
->  error document: index.html
->  Go to permissions and uncheck block all public access
->  To allow AWS CloudFront CDN, go to Permissions -> Bucket Policy -> Edit -> Policy Generator

Setup AWS CloudFront (CDN)
--------------------------
->  Search for CloudFront in AWS for Gloal CDN setup
->  Create Distribution
->  Select Web distribution
->  Fill in the details: 
    Origin Settings: Origin Domain Name, 
    Default Cache Behavior Settings: Set Viewer Protocol Policy to edirect HTTP to HTTPS
    Distribution Settngs: SSL Certificate -> Custom SSL Certificate for our yubi domain
-> Create distribution
-> Once the CloudFront distribution is created and the status is saying deployed, click on the distribution -> edit and go to 
    default Root Object and set it to "/container/latest/index.html"
-> Then go to the bottom and click on Yes Edit.
-> Also, go to Error Pages.
    Create Custom Error Response and set the HTTP Error Code to say 403 Forbidden.
    Customize Error Response to Yes
    Provide Response Path as "/container/latest/index.html"
    Change HTTP response code to 200 OK
    Ans click on create